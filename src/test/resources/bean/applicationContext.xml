<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

	<context:annotation-config />
	<aop:aspectj-autoproxy />
	<bean class="redis.clients.util.BeanUtil"/>
	<context:property-placeholder location="classpath:db.properties" />
	
	<!-- ************************ 全局配置信息 ************************ -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
	
		<!--maxIdle，控制一个pool最多有多少个状态为idle的jedis实例；设为0表示无限制。-->
		<property name="maxIdle" value="30" />
		
	 	<!--minIdle，控制一个pool最少有多少个状态为idle的jedis实例；设为0表示无限制。-->
		<property name="minIdle" value="0" />
		   	
		<!--maxTotal：控制一个pool可分配多少个jedis实例，通过pool.getResource()来获取；如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态就成exhausted了-->
		<property name="maxTotal" value="60" />
		  	
		<!--maxWaitMillis：表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException；-->
		<property name="maxWaitMillis" value="6000" />
		
		<!--minEvictableIdleTimeMillis：校验连接池中闲置时间超过minEvictableIdleTimeMillis的连接对象，表示一个对象至少停留在idle状态的最短时间，然后才能被idle object evitor扫描并驱逐；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；-->
		<property name="minEvictableIdleTimeMillis" value="60000" />
		
	  	<!--numTestsPerEvictionRun：表示idle object evitor每次扫描的最多的对象数；代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接。-->
		<property name= "numTestsPerEvictionRun" value="60" />
			  
		<!--testOnBorrow：在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的；-->
		<property name= "testOnBorrow" value="true" />
		
		<!--testOnCreate：在pool create jedis实例时，是否提前进行validate操作；-->
		<property name= "testOnCreate" value="true" />
		
		<!--testOnReturn：在return给pool时，是否提前进行validate操作；-->
		<property name= "testOnReturn" value="true" />
		
		<!--testWhileIdle：用异步线程evict进行检查，如果为true，表示有一个idle object evitor线程对idle object进行扫描，如果validate失败，此object会被从pool中drop掉；这一项只有在timeBetweenEvictionRunsMillis大于0时才有意义；-->
		<property name= "testWhileIdle" value="true" />
			
		<!--timeBetweenEvictionRunsMillis：设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程,表示idle object evitor两次扫描之间要sleep的毫秒数；-->
		<property name= "timeBetweenEvictionRunsMillis" value="30000" />  

	</bean>

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="poolConfig" />
		<constructor-arg index="1" value="127.0.0.1" />
		<constructor-arg index="2" value="6379" />
		<constructor-arg index="3" value="3000" />
		<constructor-arg index="4" value="game2017" />
		<constructor-arg index="5" value="0" />
		<constructor-arg index="6" value="game" />
		<constructor-arg index="7" value="false" />
	</bean>

	<bean id="redisService" class="redis.clients.redis.RedisService">
		<property name="jedisPool" ref="jedisPool" />
	</bean>

	<bean id="userEntityService" class="redis.clients.service.impl.UserEntityService"></bean>

	<bean id="entityProxyFactory" class="redis.clients.proxy.EntityProxyFactory"></bean>
	<bean id="entityServiceProxyFactory" class="redis.clients.proxy.EntityServiceProxyFactory"></bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<bean id="sqlSessionBatchTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg>
			<value type="org.apache.ibatis.session.ExecutorType">BATCH</value>
		</constructor-arg>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="reids.clients.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="typeAliasesPackage" value="reids.clients.entity"/>
		<property name="typeHandlersPackage" value="reids.clients"/>
		<property name="configLocation"  value="classpath:sqlMapConfig.xml"/>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							helperDialect=mysql
							reasonable=true
							supportMethodsArguments=true
							params=count=countSql
							autoRuntimeDialect=true
							rowBoundsWithCount=true
							<!--&lt;!&ndash; 支持通过Mapper接口参数来传递分页参数 &ndash;&gt;-->
							<!--<property name="helperDialect" value="mysql"/>-->
							<!--<property name="supportMethodsArguments" value="true"/>-->
							<!--<property name="rowBoundsWithCount" value="true"/>-->
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<bean id="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig">
		<property name="maxWaitMillis" value="-1" />
		<property name="maxTotal" value="8" />
		<property name="minIdle" value="0" />
		<property name="maxIdle" value="8" />
	</bean>

	<!-- 所有的数据源 -->
	<!-- 数据源公共配置 -->
	<bean id="parent_datasource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<!-- 同一时间可以从池分配的最多连接数量 设置为0时表示无限制-->
		<!--<property name="maxActive" value="8" />-->
		<!-- 超时等待时间以毫秒为单位  -->
		<!--<property name="maxWait" value="1500" />-->
		<!-- 池里不会被释放的最多空闲连接数量 设置为0时表示无限制-->
		<property name="maxIdle" value="2" />
		<!-- 池里不会被释放的最少空闲连接数量-->
		<property name="minIdle" value="1" />
		<property name="initialSize" value="2" />
		<!-- 设置自动回收超时连接 -->
		<!--<property name="removeAbandoned" value="true" />-->
		<!-- 自动回收超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="60" />
		<!-- 输出回收的日志 -->
		<property name="logAbandoned" value="true"/>
		<!-- 向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。默认为false。建议保持默认值 -->
		<property name= "testOnBorrow" value="false" />
		<!-- 打开检查,用异步线程evict进行检查 -->
		<property name= "testWhileIdle" value="true" />
		<property name= "validationQuery" value="select 1" />
		<!-- 设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程,两次扫描之间要sleep的毫秒数 -->
		<property name= "timeBetweenEvictionRunsMillis" value="30000" />
		<!-- 代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接 -->
		<property name= "numTestsPerEvictionRun" value="10" />
		<!-- 校验连接池中闲置时间超过minEvictableIdleTimeMillis的连接对象 -->
		<property name="minEvictableIdleTimeMillis" value="60000" />
	</bean>

	<bean id="jdbc_player_db" parent="parent_datasource">
		<property name="driverClassName" value="${jdbc-driver}" />
		<property name="url" value="${jdbc-url}" />
		<property name="username" value="${jdbc-user}" />
		<property name="password" value="${jdbc-password}" />
	</bean>

	<bean id="dynamicDataSource" class="redis.clients.sharding.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="jdbc_player_db" value-ref="jdbc_player_db"/>
				<!--
				<entry key="jdbc_player_db0" value-ref="jdbc_player_db0"/>
				<entry key="jdbc_player_db1" value-ref="jdbc_player_db1"/>
				<entry key="jdbc_player_db2" value-ref="jdbc_player_db2"/>-->
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="jdbc_player_db"/>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>

	<bean id="defaultEntityServiceShardingStrategy" class="redis.clients.sharding.EntityServiceShardingStrategy">
		<property name="dbCount" value="1"/>
		<property name="tableCount" value="1"/>
		<property name="dataSource" value="jdbc_player_db"/>
	</bean>
	
</beans>